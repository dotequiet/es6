// class 的继承 extend
/**
    类的 prototype 属性和__proto__属性
    Object.setPrototypeOf(Child.prototype, Point.prototype)
    Object.setPrototypeOf(Child, Point)
    Object.setPrototypeOf = function (obj, proto) {
      obj.__proto__ = proto
      return obj
    }
    Child.__proto__ = Point
**/

class Point {
  constructor (x = 1, y = 2){
    this.x = 1
    console.log(x+y)
    console.log(`qqq${this.x}`)
  }
  static hello (hello="world") {
    this.prototype.a = 'q'
    console.log(`hello ${hello}`)
  }
  fatherFn () {
    console.log(`调用了父类的方法`)
    console.log(`child里面的X: ${this.x}`)
  }
}

class Child extends Point {
  constructor (x, y){
    super(x, y) // super代表的是Child的实例this为Child的this
    this.x = 2
    super.x = 3
    console.log(this.x)
  }
  static myMethod (msg) {
    super.hello(msg)
  }
  transferStatic (name) {
    super.x = 3
    console.log('===========')
    console.log(this.x)
    console.log('===========')
    console.log(`hello ${name}`)
  }
  transferFatherFn () {
    console.log(`我是子类去掉用父类方法`)
    this.fatherFn()
  }
}
Point.hello()
new Point()
Child.myMethod('doteQuite')
let cp = new Child(3, 4)
cp.transferStatic('dote')
cp.transferFatherFn('dote')
cp.fatherFn()
console.log(cp.a)
